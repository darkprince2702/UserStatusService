// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "UserStatusServiceHandler.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TNonblockingServer.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace ::userstatusservice;

int main(int argc, char **argv) {
    Poco::AutoPtr<Poco::Util::XMLConfiguration> config(
            new Poco::Util::XMLConfiguration("config.xml"));
    int port = config->getInt("port", 8000);
    int ioThreadsNum = config->getInt("ioThreadsNum", 2);
    int workerThreadsNum = config->getInt("workerThreadsNum", 4);

    shared_ptr<UserStatusServiceHandler> handler(new UserStatusServiceHandler());
    shared_ptr<TProcessor> processor(new UserStatusServiceProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    boost::shared_ptr<ThreadManager> threadManager =
            ThreadManager::newSimpleThreadManager((size_t) workerThreadsNum);
    boost::shared_ptr<PlatformThreadFactory> threadFactory(new PlatformThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();

    TNonblockingServer server(processor, protocolFactory, port, threadManager);
    server.setNumIOThreads(ioThreadsNum);
    server.serve();

    return 0;
}

